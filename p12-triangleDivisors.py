#!/usr/bin/python

# The sequence of triangle numbers is generated by adding the natural
# numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 +
# 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28

# We can see that 28 is the first triangle number to have over five
# divisors.

# What is the value of the first triangle number to have over five
# hundred divisors?

def triNum(n):
    return sum(range(1,n+1))

def getDivs(n):
    divs=set()
    divs.add(1)
    divs.add(n)
    for i in range(2,n):
        if n % i == 0:
            if i in divs:
                break
            divs.add(i)
            divs.add(n/i)
    return divs
        

def bruteSolve():
    for i in xrange(1,10000):
        t = triNum(i)
        factors=getDivs(t)
        #print i, t, len(factors), factors
        if len(factors) == 500:
            print i, t, len(factors), sorted(factors)
            break

def solveIt():
    pass

if __name__ == '__main__':

    import timeit


    reps=1
    print(timeit.timeit("bruteSolve()", setup="from __main__ import bruteSolve", number=reps))
