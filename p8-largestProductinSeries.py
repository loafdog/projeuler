#!/usr/bin/python

#Find the greatest product of five consecutive digits in the 1000-digit number.

number_str="7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"

from itertools import izip_longest
from operator import mul

def fiveWise(iterable):
    "s -> (s0,s1), (s2,s3), (s4, s5), ..."
    a, b, c, d, e = tee(iterable)
    next(e, None)
    return izip(a, b, c, d, e)

def grouper(iterable, n, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper('ABCDEFG', 3, 'x') --> ABC DEF Gxx
    args = [iter(iterable)] * n
    return izip_longest(fillvalue=fillvalue, *args)


prods={}

def bruteSolve(n):
    number=list(map(int,number_str))
    for i in xrange(0,len(number)):
        if 0 in number[i:i+5] or 1 in number[i:i+5]:
            continue
        
        key=reduce(mul, number[i:i+5], 1)
        total = ''.join(number_str[i:i+5])
        prods[key]=total
        #print number[i:i+5]

    largestKey=sorted(prods.keys())[-1]
    print largestKey
    print prods[largestKey]
    # for v,w,x,y,z in grouper(number, 5, 0):
    #     print v,w,x,y,z
        #print "%d %d %d %d %d"%(v,w,x,y,z)


def solveIt():
    bruteSolve(10001)
    #bruteSolve(10)




if __name__ == '__main__':
    import timeit

    print(timeit.timeit("solveIt()", setup="from __main__ import solveIt", number=1))
